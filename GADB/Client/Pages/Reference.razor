@page "/defaultValues"
@using GADB.Shared.Models
@using System.Text.Json
@using System.Collections.ObjectModel
@inject HttpClient _httpClient;
<h3>Default Value Lists</h3>
<br />
<p>Select a default value list to edit its entries.</p>

@if (DataList != null)

{

    @foreach (var data in DataList)
    {
        <button type="button" class="btn btn-secondary btn-sm" style="margin-left: 3px;" @onclick="@(() => SelectItem(data))">@data.Name</button>
    }

        <br />

}
    
    <button type="button" class="btn btn-primary btn-sm" style="margin-left: 3px; margin-top: 10px" @onclick="@(() => SelectItem(null))">Create new list</button>


@if (SelectedItem != null)
{

    if (!changeName)
    {

        <h4 style="margin-top: 20px">@SelectedItem.Name </h4>

        <TelerikButton @onclick="@(() => changeName = !changeName)">Change name of default value list</TelerikButton>
        <TelerikButton Primary="true" @onclick="@(() => { DeleteValueList(SelectedItem); SelectedItem = null; })">Delete @SelectedItem.Name</TelerikButton>
    }
    else
    { <h4 style="margin-top: 20px">@SelectedItem.Name</h4>

    <TelerikTextBox @bind-Value="SelectedItem.Name" />
    <br />

    // Save new list name with empty guid
    <TelerikButton @onclick="@PostItem">Save</TelerikButton>
    <TelerikNotification @ref="@NotificationReference" Class="TelerikNotification"></TelerikNotification>
}



<br />
<br />

<TelerikGrid Data="SelectedItemValues" Sortable="true">
    <GridToolBar>
        <GridCommandButton Icon="add" OnClick="CreateNewEntry">Create new entry</GridCommandButton>
    </GridToolBar>
    <GridColumns>
        <GridColumn>
            <HeaderTemplate>
                @SelectedItem.Name
            </HeaderTemplate>
            <Template>
                @{
                        var value = context as String;
                    @value
                }
            </Template>
            <EditorTemplate>
                @{
                        var value = context as String;
                    <TelerikTextBox @bind-Value="UpdatedValue" />
                }
            </EditorTemplate>
        </GridColumn>
        <GridCommandColumn>
            <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true" OnClick="@SaveItem">Update</GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete" ShowInEdit="false" OnClick="@DeleteItem">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>
}

@code {
    private ObservableCollection<ReferenceValue> DataList { get; set; }
    private ReferenceValue SelectedItem { get; set; }
    private ObservableCollection<string> SelectedItemValues { get; set; }

    public TelerikNotification NotificationReference { get; set; }

    private string UpdatedValue { get; set; } = string.Empty;
    private string ReferenceID { get; set; }
    private bool changeName;

    protected override async Task OnInitializedAsync()
    {
        DataList = await _httpClient.GetFromJsonAsync<ObservableCollection<ReferenceValue>>("api/reference");
    }

    private void SelectItem(ReferenceValue item)
    {
        if (item == null)
        {
            SelectedItem = new ReferenceValue();
            SelectedItemValues = new ObservableCollection<string>();
            changeName = true;
        }
        else
        {
            SelectedItem = item;
            SelectedItemValues = JsonSerializer.Deserialize<ObservableCollection<string>>(SelectedItem.Value);
        }
    }

    private async Task CreateNewEntry()
    {
        SelectedItemValues.Add($"{SelectedItem.Name}#{SelectedItemValues.Count + 1}");
        StateHasChanged();
    }



    private async Task SaveItem(GridCommandEventArgs e)
    {
        var changedValue = e.Item as string;
        SelectedItemValues.Remove(changedValue);
        SelectedItemValues.Add(UpdatedValue);
        await PostItem();

    }

    private async Task DeleteItem(GridCommandEventArgs e)
    {
        var changedValue = e.Item as string;
        SelectedItemValues.Remove(changedValue);
        await PostItem();
    }

    private async Task PostItem()
    {
        SelectedItem.Value = JsonSerializer.Serialize(SelectedItemValues.ToArray());
        var response = await _httpClient.PostAsJsonAsync<ReferenceValue>("api/reference", SelectedItem);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            DataList = JsonSerializer.Deserialize<ObservableCollection<ReferenceValue>>(content);
            changeName = false;
        }
        else
        {
            NotificationReference.Show(new NotificationModel()
            {
                ThemeColor = ThemeColors.Error,
                Text = await response.Content.ReadAsStringAsync(),
            });
        }
        StateHasChanged();
    }

    private async Task DeleteValueList(ReferenceValue SelectedItem)
    {
        var response = await _httpClient.DeleteAsync($"api/reference/{SelectedItem.Id}");

        if (response.IsSuccessStatusCode)
        {
            DataList.Remove(SelectedItem);


        }
        StateHasChanged();
    }
}
<style>
    .TelerikNotification .k-notification-container .k-notification-wrap {
        width: 500px;
        height: 30px;
        font-size: 1.0em;
        text-align: center;
        align-items: center;
    }
</style>